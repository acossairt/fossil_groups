def NEW_plot_cum_mms(binned_averages, bins, thresholds, filename = "cum_mms", redshifts = redshifts, ax = None, linestyle_labels = [], **kwargs):
    # If you provide a linestyle, make sure it's in a list!
    # Current stuff
    
    if ax is None:
        fig, ax = plt.subplots()
    else:
        fig = ax.figure
        
    color = iter(cm.jet(np.linspace(0,1,len(bins) - 1)))
    bin_legend_handles = []
    
    for bin_n in range(len(bins) - 1): # Loop over bins
        current_color = next(color)
        
        for thresh_n in range(len(thresholds)): # Loop over thresholds
            ax.plot(redshifts, binned_averages[bin_n][thresh_n], color = current_color, **kwargs)
            
            if thresh_n == 0:
                bin_legend_handles.append(mpatches.Patch(color=current_color, label="bin " + str(bin_n + 1) + ": (" + "{:.2e}".format(bins[bin_n]) + " to " + "{:.2e}".format(bins[bin_n+1]) + ")"))

     # Fancy legend
    leg1 = ax.legend(handles = bin_legend_handles, loc='lower right')
    
    # If relevant, add second legend for the linestyles.
    # leg1 will be removed from figure
    if 'linestyle' in kwargs:
        imported_linestyle = kwargs['linestyle']
    if linestyle_labels != []:
        linestyles = iter(["-", imported_linestyle])
        legs = []
        labels = []
        for this_label in linestyle_labels:
            this_linestyle = next(linestyles)
            legs.append(Line2D([0,1],[0,1], linestyle = this_linestyle, color="black"))
            labels.append(this_label)
        leg2 = ax.legend((legs), (labels), loc = 'center right')
        # Manually add the first legend back
        ax.add_artist(leg1)
    
    # More accessories
    ax.set_xscale("symlog", linthresh = 1, linscale = 0.4)
    ax.set_xlabel("Redshift (z)")
    ax.set_yscale('log')
    ax.set_ylabel("Mean # Mergers between z0 and z")
    ax.set_title("Cumulative Number of Major Mergers between z0 and z")
    
    # Unnecessarily Complicated Tick Marks
    stepsize = 1
    start, end = ax.get_xlim()
    ax.xaxis.set_ticks(np.arange(0, end, stepsize))
    for axis in [ax.xaxis, ax.yaxis]:
        axis.set_major_formatter(ScalarFormatter())
    
    # Finish
    fig.savefig(filename + ".png")
    #plt.show()
    return fig, ax